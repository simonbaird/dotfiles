#!/usr/bin/env ruby
#
# If you use an external apple keyboard on your laptop
# then you probably want to swap the apple command key and
# the left alt key so that your fingers can "alt-tab" easily.
#
# But when you're using your laptop's internal keyboard you
# need to swap them back. You can do this in about 15 clicks
# via the gnome 3 systems settings 'Region and Language' control
# panel, or you can use this script.
#
# The default command (auto) will try to detect if you have
# an external apple keyboard attached via usb and set swap the
# keys accordingly, so you should be able to put this in your
# bashrc or gnome session startup (?) with the --quiet switch
# and forget about it.
#
# Latest version here:
# https://github.com/simonbaird/dotfiles/blob/master/bin/gswapalt
#
# Author: Simon Baird
#

USAGE = <<EOT
Usage: gswapalt [-q|--quiet] [-d|--debug] [<action>]

Sets or clears the 'Swap Left Alt and Left Windows keys' option in
Gnome 3's keyboard settings.

Actions:
  auto (default) - Set the option if a USB Apple Keyboard is detected, clear it otherwise
  swap, set      - Set the option (swap the keys)
  unswap, clear  - Clear the option (unswap the keys)
  toggle         - Toggle the option
  show           - Show the current setting without changing it

Options:
  -q, --quiet    - Supress output
  -d, --debug    - Show debug info
EOT

GSETTINGS     = '/usr/bin/gsettings'
SETTING_PATH  = 'org.gnome.libgnomekbd.keyboard'
SETTING_KEY   = 'options'
GET_CMD       = "#{GSETTINGS} get #{SETTING_PATH} #{SETTING_KEY}"
SET_CMD       = "#{GSETTINGS} set #{SETTING_PATH} #{SETTING_KEY} \"%s\""

SWAP_OPT      = 'altwin\taltwin:swap_lalt_lwin'

LSUSB         = '/usr/bin/lsusb'
GREP          = '/bin/grep'
DETECT_CMD    = "#{LSUSB} | #{GREP} 'Apple, Inc' | #{GREP} 'Keyboard'"

STATUS_MSG    = "Left Alt/Win keys now %s"
SWAPPED_MSG   = "SWAPPED (apple keyboard mode)"
UNSWAPPED_MSG = "UNSWAPPED (laptop keyboard mode)"

# Read options (Too lazy to use getoptlong...)
QUIET  = ARGV.delete('-q') || ARGV.delete('--quiet')
DEBUG  = ARGV.delete('-d') || ARGV.delete('--debug')
DANGER = ARGV.delete('--danger') # :)

# Read command
action = ARGV[0] || 'auto'

# Read current settings
# We get a serialised GVariant
#
# Examples of how it looks:
#  ['caps\tcaps:ctrl_modifier', 'altwin\taltwin:swap_lalt_lwin']
#  ['caps\tcaps:ctrl_modifier']
#  @as []
#
# When there are no options set we get an extra @as, not sure why
original_string = `#{GET_CMD}`.chomp.sub(/^@as /,'')
puts "Original: #{original_string}" if DEBUG

if DANGER
  # This is close enough to ruby that we can eval it ;)
  puts "** INITIATE EVAL SEQUENCE! **" unless QUIET
  options = eval original_string
  puts "** EVAL COMPLETE! **" unless QUIET
else
  # Let's be sensible :)
  options = original_string.gsub(/(^\[|\]$)/,'').split(', ').map{ |opt| opt.gsub(/(^'|'$)/,'') }
end

# Remember initial condition
initially_swapped = options.include? SWAP_OPT

# Remove it first
options.delete SWAP_OPT

puts "Action: #{action}" if DEBUG
case action
when 'unswap','clear'
  # (Stays removed)

when 'swap','set'
  # Add it
  options.push SWAP_OPT

when 'toggle'
  # Add it if wasn't there before
  options.push(SWAP_OPT) if !initially_swapped

when 'show'
  # Add it if was there before
  options.push(SWAP_OPT) if initially_swapped

when 'auto'
  apple_keyboard_present = !`#{DETECT_CMD}`.strip.empty?
  options.push(SWAP_OPT) if apple_keyboard_present

else
  puts USAGE
  exit
end

# Serialize it carefully to the format gsettings expects
serialized = "[#{options.map{ |opt| "'#{opt}'" }.join(', ')}]"

# Write it back
`#{SET_CMD % serialized}`
puts "Updated: #{serialized}" if DEBUG

# Show status
puts STATUS_MSG % (options.include?(SWAP_OPT) ? SWAPPED_MSG : UNSWAPPED_MSG) unless QUIET
