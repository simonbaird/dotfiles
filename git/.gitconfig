[user]
	name = Simon Baird
	email = simon.baird@gmail.com

[color]
	branch = auto
	status = auto
	diff = auto

[push]
	default = tracking

[core]
	editor = vim
	excludesfile = ~/.gitignore-global

	# -E means less doesn't page if file smaller than one screen
	# -F means less quits at end of file
	# -r something to do with ansi colours, it fixes the %C(yellow)%+d coloring somehow
	pager = less -E -F -r

[alias]
	# The only way to do it...
	ap = add --patch

	# Shortcuts
	#s = status -sb
	#st = status -sb
	s = status
	st = status
	c = checkout
	a = add
	b = branch
	d = diff
	ds = diff --staged
	sd = diff --staged
	ca = commit --amend --no-edit
	amend = commit --amend
	ff = merge --ff-only

	wd = diff --color-words
	swd = diff --staged --color-words
	wsd = diff --staged --color-words

	newbranch = checkout -b
	nb = checkout -b

	newtrack = branch --track
	nt = branch --track

	# Previous branch
	prev = checkout @{-1}

	resetfile = checkout

	# For when you just pushed to gerrit
	rod = "![ $(git rev-parse --abbrev-ref HEAD) = 'develop' ] && git reset --hard origin/develop"

	# Fetch change set (from gerrit) and check it out in a suitably named branch
	# $1 is the gerrit, eg 'refs/changes/99/24999/2'
	# $2 is an optional branch name suffix
	# Will create a branch such as gerrit-33716-2,
	# or gerrit-33716-2-foobar if you use the optional suffix
	fcs = "!f() { [ -n \"$1\" ] && git fetch origin $1 && git checkout -b $( echo gerrit/$1-$2 | cut -d/ -f1,5,6 | sed 's/\\//-/g' | sed 's/\\-$//' ) FETCH_HEAD; }; f"

	ld = log -p

	# https://gist.github.com/1501998
	ph = log --graph --pretty=pretty-history --abbrev-commit --date=relative
	ph2 = log --graph --pretty=nice --abbrev-commit --date=relative
	lg = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
	lg2 = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(bold white)— %an%C(reset)' --abbrev-commit

	# Nice list of branches by age (newest at bottom)
	bb = "for-each-ref --sort=committerdate --format='%1B[36m%(committerdate:relative) %1B[33m%(refname:short)%1B[0;m %(subject)' refs/heads/"

	# Keep your branches organised
	branch-name = rev-parse --abbrev-ref HEAD
	branch-basename = "!git branch-name | rev | cut -d '/' -f 1 | rev"
	mv-branch = "!f() { git branch -m $1/`git branch-basename`; }; f"

	#lll = log --pretty=nice
	lll = log --pretty='format:%Cblue%h %C(cyan)%cr %Cgreen%an%Creset %s%C(yellow)%d %Creset'
	ll = log -n20 --pretty='format:%Cblue%h %C(cyan)%cr %Cgreen%an%Creset %s%C(yellow)%d %Creset'

	rbs = rebase -i --autosquash
	rba = rebase --abort
	rbc = rebase --continue

	comment      = "!__(){ ( set -x; ssh -p 29418 $GERRIT_HOST gerrit review -m \"'$2'\" \"$1\" -p $GERRIT_PROJECT; ); }; __"
	scorecomment = "!__(){ ( set -x; ssh -p 29418 $GERRIT_HOST gerrit review -m \"'$3'\" --code-review \"$2\" \"$1\" -p $GERRIT_PROJECT; ); }; __"
	abandon      = "!__(){ ( set -x; ssh -p 29418 $GERRIT_HOST gerrit review --abandon \"$1\" -p $GERRIT_PROJECT; ); }; __"
	invite       = "!__(){ ( set -x; ssh -p 29418 $GERRIT_HOST gerrit set-reviewers \"$@\" -a user1@example.com -a user2@example.com -p $GERRIT_PROJECT; ); }; __"

	cp = cherry-pick -x

	email-rh = "config user.email sbaird@redhat.com"
	email-sb = "config user.email simon.baird@gmail.com"
	email = "config user.email"

	# In later gits you can use commit --fixup
	fixup = "!f() { [ -n \"$1\" ] && git commit -m \"fixup! $( git log -n1 --format=%s \"$1\" )\"; }; f"

	# Non-interactive autosquash
	fastsquash = "!GIT_EDITOR=: git rebase -i --autosquash"

	# Amend a commit in your history then rebase on top of it
	amendany = "!f() { [ -n \"$1\" ] && rbparent=$( git log -n1 --format=%H \"$1^\" ) && git fixup \"$1\" && git fastsquash $rbparent; }; f"
	amendparent = "!git amendany HEAD^"

[pretty]
	nice = format:%Cblue%h %C(cyan)%cr %Cgreen%an%Creset %s%C(yellow)%d %C(black)%cn%Creset
	pretty-history = format:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset

[color "diff"]
	# Makes git log -p easier to read
	commit = yellow reverse

[diff]
	algorithm = patience
	compactionHeuristic = true
